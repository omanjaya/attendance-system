<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

/**
 * User Model
 * 
 * Represents system users with authentication, authorization, and API token capabilities.
 * Integrates with Spatie permissions for role-based access control and Sanctum for API authentication.
 * 
 * @property int $id
 * @property string $name
 * @property string $email
 * @property \Carbon\Carbon|null $email_verified_at
 * @property string $password
 * @property string|null $remember_token
 * @property \Carbon\Carbon|null $created_at
 * @property \Carbon\Carbon|null $updated_at
 */
class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable, HasApiTokens, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    /**
     * Get the employee record associated with the user.
     */
    public function employee(): HasOne
    {
        return $this->hasOne(Employee::class);
    }

    /**
     * Get all leave requests that were requested by this user.
     */
    public function leaveRequests(): HasMany
    {
        return $this->hasMany(LeaveRequest::class, 'requested_by');
    }

    /**
     * Get all leave requests approved by this user.
     */
    public function approvedLeaveRequests(): HasMany
    {
        return $this->hasMany(LeaveRequest::class, 'approved_by');
    }

    /**
     * Get all attendance records approved by this user.
     */
    public function approvedAttendanceRecords(): HasMany
    {
        return $this->hasMany(AttendanceRecord::class, 'approved_by');
    }

    /**
     * Get all payroll records generated by this user.
     */
    public function generatedPayrollRecords(): HasMany
    {
        return $this->hasMany(PayrollRecord::class, 'generated_by');
    }

    /**
     * Get all payroll records approved by this user.
     */
    public function approvedPayrollRecords(): HasMany
    {
        return $this->hasMany(PayrollRecord::class, 'approved_by');
    }

    /**
     * Check if the user is an employee.
     */
    public function isEmployee(): bool
    {
        return $this->employee()->exists();
    }

    /**
     * Get the user's full name.
     */
    public function getFullNameAttribute(): string
    {
        if ($this->employee) {
            return $this->employee->first_name . ' ' . $this->employee->last_name;
        }
        return $this->name;
    }

    /**
     * Check if user can approve attendance records.
     */
    public function canApproveAttendance(): bool
    {
        return $this->hasPermissionTo('approve attendance') || $this->hasRole(['admin', 'hr', 'supervisor']);
    }

    /**
     * Check if user can approve leave requests.
     */
    public function canApproveLeave(): bool
    {
        return $this->hasPermissionTo('approve leave') || $this->hasRole(['admin', 'hr', 'supervisor']);
    }

    /**
     * Check if user can manage payroll.
     */
    public function canManagePayroll(): bool
    {
        return $this->hasPermissionTo('manage payroll') || $this->hasRole(['admin', 'hr']);
    }
}
