version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: attendance_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-hostinger.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/web/dist:/usr/share/nginx/html:ro
      - /home/${USER}/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - attendance_network
    depends_on:
      - backend
      - face_service

  # Laravel Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: attendance_backend
    restart: unless-stopped
    expose:
      - "80"
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - backend_logs:/var/www/html/storage/logs
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    env_file:
      - ./backend/.env
    networks:
      - attendance_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Face Recognition Microservice
  face_service:
    build:
      context: .
      dockerfile: docker/face-recognition.Dockerfile
    container_name: attendance_face_service
    restart: unless-stopped
    expose:
      - "8001"
    volumes:
      - face_encodings:/app/storage/encodings
      - employee_photos:/app/storage/photos
      - face_logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - ./services/face-recognition-service/.env
    networks:
      - attendance_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: attendance_postgres
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - postgres_backup:/backup
    networks:
      - attendance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: attendance_redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - attendance_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  postgres_backup:
    driver: local
  redis_data:
    driver: local
  face_encodings:
    driver: local
  employee_photos:
    driver: local
  backend_storage:
    driver: local
  backend_logs:
    driver: local
  face_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  attendance_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16