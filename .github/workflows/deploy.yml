name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/web/package-lock.json
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        tools: composer:v2
    
    - name: Install frontend dependencies
      working-directory: ./frontend/web
      run: |
        npm ci
        npm run lint:check
    
    - name: Build frontend
      working-directory: ./frontend/web
      run: npm run build
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        composer install --prefer-dist --no-ansi --no-interaction --no-progress --optimize-autoloader
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan test

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/web/package-lock.json
    
    - name: Build frontend for production
      working-directory: ./frontend/web
      run: |
        npm ci
        npm run build
      env:
        NODE_ENV: production
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          set -e
          
          # Navigate to project directory
          cd /var/www/attendance-system
          
          # Backup current version
          sudo cp -r . ../attendance-system-backup-$(date +%Y%m%d_%H%M%S) || true
          
          # Pull latest changes
          git fetch --all
          git reset --hard origin/main
          
          # Update backend dependencies
          cd backend
          composer install --no-dev --optimize-autoloader
          
          # Update frontend dependencies and build
          cd ../frontend/web
          npm ci --only=production
          npm run build
          
          # Copy environment files
          cd ../..
          sudo cp backend/.env.production backend/.env
          sudo cp frontend/web/.env.production frontend/web/.env
          
          # Run database migrations
          cd backend
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Update Docker containers
          cd ..
          sudo docker-compose -f docker-compose.prod.yml down
          sudo docker-compose -f docker-compose.prod.yml build --no-cache
          sudo docker-compose -f docker-compose.prod.yml up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/api/health || exit 1
          
          echo "Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add your notification logic here (Slack, Discord, Email, etc.)
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add your notification logic here (Slack, Discord, Email, etc.)